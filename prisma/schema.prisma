// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int           @id @default(autoincrement())
  title       String        @unique
  description String?
  body        String
  published   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Role {
  deliver
  admin
}

model Sender {
  id           String        @id     @default(uuid())
  created_at   DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  phone_number String
  address      String
  township     String
  city         String
  parcels      Parcel[]

  @@unique([name, phone_number])
}

model Receiver {
  id           String        @id     @default(uuid())
  created_at   DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  phone_number String
  address      String
  township     String
  city         String
  parcels      Parcel[]

  @@unique([name, phone_number])
}

model User {
  id           String        @id     @default(uuid())
  created_at   DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  phone_number String
  address      String
  township     String
  city         String
  role         Role
  parcels      Parcel[]
}

model Parcel {
  id                    String        @id     @default(uuid())
  created_at            DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  price                 Int
  picked_up             Boolean       @default(false)
  arrived_warehouse     Boolean       @default(false)
  deliver               Boolean       @default(false)
  finish                Boolean       @default(false)

  sender                Sender       @relation(fields: [sender_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  sender_id             String

  receiver              Receiver       @relation(fields: [receiver_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  receiver_id         String

  user                  User?       @relation(fields: [user_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  user_id               String?

  location              Location?   @relation(fields: [location_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  location_id           String?
}

model Location {
  id                String        @id     @default(uuid())
  latitude          String
  longitude         String
  created_at        DateTime      @default(now())

  parcels           Parcel[]
}

model Township {
  id                String        @id     @default(uuid())
  name              String
}